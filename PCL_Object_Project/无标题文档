https://blog.csdn.net/coldplayplay/article/details/78507219

//ok
sudo apt-get install libboost-all-dev  
sudo apt-get install libeigen3-dev 
sudo apt-get install libflann1.8 libflann-dev  


sudo apt-get install git build-essential linux-libc-dev  
sudo apt-get install libusb-1.0-0-dev libusb-dev libudev-dev  
sudo apt-get install libqhull* libgtest-dev  
sudo apt-get install libgl1-mesa-dev 
sudo apt-get install libxt-dev 
sudo apt-get install freeglut3-dev pkg-config  
sudo apt-get install libxmu-dev libxi-dev   
sudo apt-get install mpi-default-dev openmpi-bin openmpi-common  
sudo apt-get install mono-complete  


主要解决qt+vtk
Qt自己安装官网版本
//VTK
cmake -DVTK_QT_VERSION:STRING=5 -DQT_QMAKE_EXECUTABLE:PATH=/home/zero/Qt5.10.1/5.10.1/gcc_64/bin/qmake -DVTK_Group_Qt:BOOL=ON -DCMAKE_PREFIX_PATH:PATH=/home/zero/Qt5.10.1/5.10.1/gcc_64/lib/cmake -DBUILD_SHARED_LIBS:BOOL=ON  /home/zero/Downloads/VTK-7.1.1 
make -j4  
sudo make -j4 install 

//pcl
cmake -DCMAKE_BUILD_TYPE=Release -DWITH_OPENNI=ON -DWITH_OPENNI2=ON -L ..  
make -j4  
sudo make -j4 install  

//not 未编译pcl1.8.1





推荐使用CMake生成解决方案.如果项目出现无法链接到QT5:: Widgets.lib等,需要将源码中的cmake/
pcl_find_qt5.cmake复制到项目CMakeLists.txt的目录下。并加入语句，它会帮助找到QT5的





#pcl
file(GLOB SOURCE_PCL ./pcl_project/*.cpp)

#qt
file(GLOB QT_SRC_FILE ./qt_project/*.cpp)
file(GLOB QT_UI_FILE ${PROJECT_SOURCE_DIR}/forms/*.ui)
file(GLOB QT_HEADER_FILE ${PROJECT_SOURCE_DIR}/include/qt_project/*.h)
file(GLOB QT_RCC_FILE ${PROJECT_SOURCE_DIR}/resource/*.qrc)

#利用qt5_wrap_ui可以把.ui文件包裹成一个ui_*.h文件，这里定义到${ui_FILES}变量里，在可执行文件中需要加入目标文件中, 利用qt5_add_resources（）命令，添加生成的qrc_*.cpp和其他源文件以及ui_*.h到target内
qt5_wrap_cpp(QT_HEADER_MOC ${QT_HEADER_FILE})
qt5_wrap_ui(QT_UI_MOC ${QT_UI_FILE})
qt5_add_resources(QT_RCC_MOC ${QT_RCC_FILE})

add_library(QT_LIB SHARED
    ${QT_SRC_FILE}
    ${QT_HEADER_MOC}
    ${QT_UI_MOC}
    ${QT_RCC_MOC}
    )
target_link_libraries(QT_LIB
    Qt5::Widgets)

#main project
add_executable(${PROJECT_NAME}
    main.cpp
    ${SOURCE_PCL}
    ${QT_SRC_FILE})

target_link_libraries(${PROJECT_NAME}
    ${PCL_LIBRARIES}
    ${OpenCV_LIBS}
    QT_LIB)

#build path
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)


#程序编译时指定
You need to specify cmake -Dfreenect2_DIR=$HOME/freenect2/lib/cmake/freenect2 for CMake based third-party application to find libfreenect2.






